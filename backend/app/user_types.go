// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "LTime API": Application User Types
//
// Command:
// $ goagen
// --design=github.com/lvikstro/ltime/backend/design
// --out=$(GOPATH)/src/github.com/lvikstro/ltime/backend
// --version=v1.3.1

package app

import (
	"github.com/goadesign/goa"
	"unicode/utf8"
)

// loginPayload user type.
type loginPayload struct {
	Email    *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the loginPayload type instance.
func (ut *loginPayload) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "password"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Email != nil {
		if utf8.RuneCountInString(*ut.Email) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.email`, *ut.Email, utf8.RuneCountInString(*ut.Email), 6, true))
		}
	}
	if ut.Email != nil {
		if utf8.RuneCountInString(*ut.Email) > 400 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.email`, *ut.Email, utf8.RuneCountInString(*ut.Email), 400, false))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 8, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 1024 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 1024, false))
		}
	}
	return
}

// Publicize creates LoginPayload from loginPayload
func (ut *loginPayload) Publicize() *LoginPayload {
	var pub LoginPayload
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.Password != nil {
		pub.Password = *ut.Password
	}
	return &pub
}

// LoginPayload user type.
type LoginPayload struct {
	Email    string `form:"email" json:"email" yaml:"email" xml:"email"`
	Password string `form:"password" json:"password" yaml:"password" xml:"password"`
}

// Validate validates the LoginPayload type instance.
func (ut *LoginPayload) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "password"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(ut.Email) < 6 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.email`, ut.Email, utf8.RuneCountInString(ut.Email), 6, true))
	}
	if utf8.RuneCountInString(ut.Email) > 400 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.email`, ut.Email, utf8.RuneCountInString(ut.Email), 400, false))
	}
	if utf8.RuneCountInString(ut.Password) < 8 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 8, true))
	}
	if utf8.RuneCountInString(ut.Password) > 1024 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 1024, false))
	}
	return
}

// registerPayload user type.
type registerPayload struct {
	Email     *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" yaml:"first_name,omitempty" xml:"first_name,omitempty"`
	LastName  *string `form:"last_name,omitempty" json:"last_name,omitempty" yaml:"last_name,omitempty" xml:"last_name,omitempty"`
	Password  *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the registerPayload type instance.
func (ut *registerPayload) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "password"))
	}
	if ut.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "first_name"))
	}
	if ut.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "last_name"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Email != nil {
		if utf8.RuneCountInString(*ut.Email) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.email`, *ut.Email, utf8.RuneCountInString(*ut.Email), 6, true))
		}
	}
	if ut.Email != nil {
		if utf8.RuneCountInString(*ut.Email) > 400 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.email`, *ut.Email, utf8.RuneCountInString(*ut.Email), 400, false))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.first_name`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 1, true))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.first_name`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 200, false))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.last_name`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 1, true))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.last_name`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 200, false))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 8, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 1024 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 1024, false))
		}
	}
	return
}

// Publicize creates RegisterPayload from registerPayload
func (ut *registerPayload) Publicize() *RegisterPayload {
	var pub RegisterPayload
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.FirstName != nil {
		pub.FirstName = *ut.FirstName
	}
	if ut.LastName != nil {
		pub.LastName = *ut.LastName
	}
	if ut.Password != nil {
		pub.Password = *ut.Password
	}
	return &pub
}

// RegisterPayload user type.
type RegisterPayload struct {
	Email     string `form:"email" json:"email" yaml:"email" xml:"email"`
	FirstName string `form:"first_name" json:"first_name" yaml:"first_name" xml:"first_name"`
	LastName  string `form:"last_name" json:"last_name" yaml:"last_name" xml:"last_name"`
	Password  string `form:"password" json:"password" yaml:"password" xml:"password"`
}

// Validate validates the RegisterPayload type instance.
func (ut *RegisterPayload) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "password"))
	}
	if ut.FirstName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "first_name"))
	}
	if ut.LastName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "last_name"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(ut.Email) < 6 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.email`, ut.Email, utf8.RuneCountInString(ut.Email), 6, true))
	}
	if utf8.RuneCountInString(ut.Email) > 400 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.email`, ut.Email, utf8.RuneCountInString(ut.Email), 400, false))
	}
	if utf8.RuneCountInString(ut.FirstName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.first_name`, ut.FirstName, utf8.RuneCountInString(ut.FirstName), 1, true))
	}
	if utf8.RuneCountInString(ut.FirstName) > 200 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.first_name`, ut.FirstName, utf8.RuneCountInString(ut.FirstName), 200, false))
	}
	if utf8.RuneCountInString(ut.LastName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.last_name`, ut.LastName, utf8.RuneCountInString(ut.LastName), 1, true))
	}
	if utf8.RuneCountInString(ut.LastName) > 200 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.last_name`, ut.LastName, utf8.RuneCountInString(ut.LastName), 200, false))
	}
	if utf8.RuneCountInString(ut.Password) < 8 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 8, true))
	}
	if utf8.RuneCountInString(ut.Password) > 1024 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 1024, false))
	}
	return
}
